import pandas as pd
#Считать данные с помощью pandas
#Вывести на экран первые 5 строк

df = pd.read_csv('kc_house_data.csv')
df.head()
            id	           date	   price bedrooms	bathrooms	sqft_living	sqft_lot	floors	waterfront	view	...	grade	sqft_above	sqft_basement	yr_built	yr_renovated	zipcode	    lat	    long	sqft_living15	sqft_lot15
#0	7129300520	20141013T000000	221900.0	    3	     1.00	       1180	    5650	   1.0	         0	   0	...	    7	      1180	            0	    1955	           0	  98178	47.5112	-122.257	         1340	      5650
#1	6414100192	20141209T000000	538000.0	    3	     2.25	       2570	    7242	   2.0	         0	   0	...	    7	      2170	          400	    1951	        1991	  98125	47.7210	-122.319	         1690	      7639
#2	5631500400	20150225T000000	180000.0	    2	     1.00	        770    10000	   1.0	         0	   0	...	    6	       770	            0	    1933	           0	  98028	47.7379	-122.233	         2720	      8062
#3	2487200875	20141209T000000	604000.0	    4	     3.00	       1960	    5000	   1.0	         0	   0	...	    7	      1050	          910	    1965	           0	  98136	47.5208	-122.393	         1360	      5000
#4	1954400510	20150218T000000	510000.0	    3	     2.00	       1680	    8080	   1.0	         0     0	...	    8	      1680	            0	    1987	           0	  98074	47.6168	-122.045	         1800	      7503
#5 rows × 21 columns

#1.2
#Создать новый признак delta_renovated, который будет содержать разницу в годах между годом реновацией дома и годом постройки дома
#Если реновации дома не было, то в новом признаке поставьте 0

def _renovated():
    delta_renovated = []
    for _, row in df.iterrows():
        if row['yr_renovated'] > 0:
            delta_renovated.append(row['yr_renovated'] - row['yr_built'])
        else:
            delta_renovated.append(0)
    return delta_renovated


df['delta_renovated'] = _renovated()
df.head()
#           id	           date	   price	bedrooms	bathrooms	sqft_living	sqft_lot	floors	waterfront	view	...	sqft_above	sqft_basement	yr_built	yr_renovated	zipcode	lat	          long	sqft_living15	sqft_lot15	delta_renovated
#0	7129300520	20141013T000000	221900.0	       3	     1.00	       1180	    5650	   1.0	         0	   0	...	      1180	            0	    1955	           0	  98178	 47.5112  -122.257	         1340	      5650	              0
#1	6414100192	20141209T000000	538000.0       	   3	     2.25	       2570	    7242	   2.0	         0	   0	...	      2170	          400	    1951	        1991	  98125	 47.7210  -122.319	         1690	      7639	             40
#2	5631500400	20150225T000000	180000.0	       2	     1.00	        770	   10000	   1.0	         0	   0	...	       770	            0	    1933	           0	  98028	 47.7379  -122.233	         2720	      8062	              0
#3	2487200875	20141209T000000	604000.0	       4	     3.00	       1960	    5000	   1.0	         0	   0	...	      1050	          910	    1965	           0	  98136	 47.5208  -122.393	         1360	      5000	              0
#4	1954400510	20150218T000000	510000.0	       3	     2.00	       1680	    8080	   1.0	         0	   0	...	      1680	            0	    1987	           0	  98074	 47.6168  -122.045	         1800	      7503	              0
#5rows × 22 columns

#1.3
#Создайте признаки года продажи, месяца продажи

df['yr_sale'] = df['date'].apply(lambda x: x[0:4])
df['month_sale'] = df['date'].apply(lambda x: x[4:6])
df.head()
#           id	           date	   price	bedrooms	bathrooms	sqft_living	sqft_lot	floors	waterfront	view	...	yr_built	yr_renovated	zipcode	    lat	    long	sqft_living15	sqft_lot15	delta_renovated	yr_sale	month_sale
#0	7129300520	20141013T000000	221900.0	       3	     1.00	       1180	    5650	   1.0	         0	   0	...	    1955	           0	  98178	47.5112	-122.257	         1340	      5650	              0	   2014	        10
#1	6414100192	20141209T000000	538000.0	       3	     2.25	       2570	    7242	   2.0	         0	   0	...	    1951	        1991	  98125	47.7210	-122.319	         1690	      7639	             40	   2014	        12
#2	5631500400	20150225T000000	180000.0	       2	     1.00	        770	   10000	   1.0	         0	   0	...	    1933	           0	  98028	47.7379	-122.233	         2720	      8062	              0	   2015	        02
#3	2487200875	20141209T000000	604000.0	       4	     3.00	       1960	    5000	   1.0	         0	   0	...	    1965	           0	  98136	47.5208	-122.393	         1360	      5000	              0	   2014	        12
#4	1954400510	20150218T000000	510000.0	       3	     2.00	       1680	    8080	   1.0	         0	   0	...	    1987	           0	  98074	47.6168	-122.045	         1800	      7503	              0	   2015	        02
#5 rows × 24 columns
#1.4
#Удалите признаки date, zipcode, lat, long

df.drop(columns=['date', 'zipcode', 'lat', 'long'], inplace=True)
df.head()
#           id	   price	bedrooms	bathrooms	sqft_living	sqft_lot	floors	waterfront	view	condition	grade	sqft_above	sqft_basement	yr_built	yr_renovated	sqft_living15	sqft_lot15	delta_renovated	yr_sale	month_sale
#0	7129300520	221900.0	       3	     1.00	       1180	    5650	   1.0	         0	   0	        3	    7	      1180	            0	    1955	           0	         1340	      5650	              0	   2014	        10
#1	6414100192	538000.0	       3	     2.25	       2570	    7242	   2.0	         0	   0	        3	    7	      2170	          400	    1951	        1991	         1690	      7639	             40	   2014	        12
#2	5631500400	180000.0	       2	     1.00	        770	   10000	   1.0	         0	   0	        3	    6	       770	            0	    1933	           0	         2720	      8062	              0	   2015	        02
#3	2487200875	604000.0	       4	     3.00	       1960	    5000	   1.0	         0	   0	        5	    7	      1050	          910	    1965	           0	         1360	      5000	              0	   2014      	12
#4	1954400510	510000.0	       3	     2.00	       1680	    8080	   1.0	         0	   0	        3	    8	      1680	            0	    1987	           0	         1800	      7503	              0	   2015	        02
#Условие 2
#Создайте датафрейм с клиентами:

clients = pd.DataFrame({
    'client_id': [1459, 4684, 3498, 3942, 4535, 2308, 2866, 2765, 1472, 4236, 2295,
                  939, 3840, 280, 20, 4332, 3475, 4213, 3113, 4809, 2134, 2242,
                  2068, 4929, 1384, 1589, 3317, 2260, 1727, 1764, 1611, 1474],
    'house_id': [8965450190, 6823100225, 5104540330, 2131701075, 1522700060,
                 1189000207, 6821600300, 7137950720, 9510920050, 6131600255,
                 5428000070, 1788800910, 8100400160, 3123049142, 6306800010,
                 5083000375, 7920100025, 1951600150, 809001400, 339600110,
                 1622049154, 1099600250, 8563000110, 2768100205, 3995700435,
                 8861700030, 3303980210, 7731100066, 8146100580, 825069097,
                 3889100029, 9524100196]
})
#2.1
#Присоедините к таблице clients данные по домам через метод join

new = clients.set_index('house_id').join(df.set_index('id'))
new.info()
new
#<class 'pandas.core.frame.DataFrame'>
#Int64Index: 33 entries, 339600110 to 9524100196
#Data columns (total 20 columns):
 #   Column           Non-Null Count  Dtype
#---  ------           --------------  -----
# 0   client_id        33 non-null     int64
#1   price            33 non-null     float64
# 2   bedrooms         33 non-null     int64
#3   bathrooms        33 non-null     float64
#4   sqft_living      33 non-null     int64
#5   sqft_lot         33 non-null     int64
#6   floors           33 non-null     float64
#7   waterfront       33 non-null     int64
#8   view             33 non-null     int64
#9   condition        33 non-null     int64
#10  grade            33 non-null     int64
#11  sqft_above       33 non-null     int64
#12  sqft_basement    33 non-null     int64
#13  yr_built         33 non-null     int64
#14  yr_renovated     33 non-null     int64
#15  sqft_living15    33 non-null     int64
#16  sqft_lot15       33 non-null     int64
#17  delta_renovated  33 non-null     int64
#18  yr_sale          33 non-null     object
#19  month_sale       33 non-null     object
#dtypes: float64(3), int64(15), object(2)
#memory usage: 5.4+ KB
#       client_id	    price	 bedrooms  bathrooms sqft_living  sqft_lot   floors waterfront	     view	condition	 grade	   sqft_above  sqft_basement	yr_built	 yr_renovated sqft_living15	sqft_lot15	delta_renovated	 yr_sale  month_sale
# 339600110	 4809	 395000.0	        3	    2.50	    1610	  3755	    2.0	         0	        0	    3	         7	         1610	       0	        1987	            0	      1300	      3823	              0	    2014	      09
# 809001400	 3113	 925000.0	        3	    1.00	    1630	  3200	    1.5	         0	        0	    4	         8	         1630	       0	        1912	            0	      1710	      3600	              0	    2014	      09
# 825069097	 1764	 770000.0	        3	    2.50	    2650	 40705	    2.0	         0	        0	    3	         9	         2650	       0	        1994	            0	      2550	     42625	              0	    2014	      06
#1099600250	 2242	 260000.0	        3       1.75	    1710	  6400	    1.0	         0	        0	    4	         7	         1240	     470	        1976	            0	      1600	      6400	              0	    2014	      12
#1189000207	 2308	 387000.0	        2	    2.50	    1170	  1394	    2.0	         0	        0	    3	         8	         1170	       0	        2001	            0	      1250	      3136	              0	    2014	      10
#1522700060	 4535	 518000.0	        4	    2.75	    2520	 14021	    2.0	         0	        0	    3	         9	         2520	       0	        1999	            0	      2330	     14007	              0	    2014	      06
#1622049154	 2134	 289900.0	        3	    1.75	    1899	 11325	    2.0	         0	        0	    3	         7	         1899	       0	        1943	         2005	      2000	     10454	             62	    2014	      12
#1788800910	  939	 190000.0	        3	    1.00	    1200	 10458	    1.0	         0	        0	    4	         6	         1200	       0	        1961	            0	      1160	      9000	              0	    2014	      10
#1951600150	 4213	 180000.0	        3	    1.00	    1610	  8500	    1.5	         0	        0	    3	         7	         1610	       0	        1959	            0	      1070	      8750	              0	    2015	      04
#2131701075	 3942	 420000.0	        3	    1.75	    1720	  5000	    1.5	         0	        0	    3	         8	         1720	       0	        1932	         2009	      1410	      8300	             77	    2014	      12
#2768100205	 4929	 519000.0	        4	    2.50	    1950	  2617	    1.5	         0	        0	    4	         7	         1250	     700	        1910	            0	      1520	      1438	              0	    2014	      06
#3123049142	  280	 452000.0	        3	    2.25	    2600	 14810	    1.0	         0	        2	    4	         8	         1490	    1110	        1956	            0	      2450	     16715	              0	    2014	      08
#3303980210	 3317	1115000.0	        4	    3.75	    4040	 14212	    2.0	         0	        0	    3	        11	         4040	       0	        2002	            0	      3940	     14212	              0	    2015	      04
#3889100029	 1611	 810000.0	        3	    2.50	    2670	 10481	    2.0	         0	        0	    3	         9	         2670	       0	        2003	            0	      2620	      8895                0		2014	      06
#3995700435	 1384	 265000.0	        4	    3.00	    1940	  8170	    1.0	         0	        0	    4	         7	         1940	       0	        1948	            0	      1310	      8169	              0	    2014	      07
#5083000375	 4332	 170000.0	        3	    1.00	    1310	  9529	    1.0	         0	        0	    3	         7	         1310	       0	        1956	            0	      1330	      9529	              0  	2014	      10
#5083000375	 4332	 235000.0	        3	    1.00	    1310	  9529	    1.0	         0	        0	    3	         7	         1310	       0	        1956	            0	      1330	      9529	              0	    2015	      03
#5104540330	 3498	 679000.0	        4	    2.50	    3680	  7236	    2.0	         0	        0	    3	        10	         3680	       0	        2006	            0	      3310	      7180	              0	    2015	      05
#5428000070	 2295	 770000.0	        5	    3.50	    4750	  8234	    2.0	         0	        2	    3	        10	         3350	    1400	        2013	            0	      2160	     14496	              0	    2015	      05
#6131600255	 4236	 202500.0	        3	    2.00	    1540	  8316	    1.0	         0	        0	    5	         6	         1540	       0	        1954	            0	      1250	      8316	              0     2014	      12
#6306800010	   20	 436472.0	        4	    2.50	    2692	  8392	    2.0	         0	        0	    3	         9	         2692	       0	        2014	            0	      2574	     14446                0	    2014	      08
#6823100225	 4684	 700000.0	        4	    1.75	    1870	  6000	    1.0	         0	        0	    5	         8	         1670	     200	        1949	            0	      1710	      6000		          0	    2015	      03
#6821600300	 2866	 886000.0	        3	    2.25	    2380	  6000	    2.0	         0	        0	    5	         9	         1650	     730	        1931	            0	      2000	      6000	              0     2015	      04
#7137950720	 2765	 339100.0	        4	    2.50	    2350	 10655	    2.0	         0	        0	    3	         8	         2350	       0	        1992	            0	      2210	      7028	              0	    2015	      03
#7731100066	 2260	 545000.0	        3	    1.00	    1510	  5000	    1.5	         0	        0	    3	         7	         1510	       0	        1909	            0	      1680	      4000	              0	    2014	      06
#7920100025	 3475	 450000.0	        2	    1.00	     740	  5100	    1.0	         0	        0	    4	         7	          740	       0	        1947	            0	       920	      5100	              0	    2015	      04
#8100400160	 3840	 700000.0	        3	    2.25	    2330	 11424	    2.0	         0	        0	    4	         8	         2330	       0	        1984	            0	      2050	     11448	              0	    2015	      04
#8146100580	 1727	 765000.0	        3	    1.00	    1220	  7585	    1.0	         0	        0	    4	         7	         1220	       0	        1954	            0	      1380	      8918	              0	    2014	      10
#8563000110	 2068	 427000.0	        4	    1.75	    1460	  9750	    1.0	         0	        0	    4	         7	         1460	       0	        1967	            0	      1820	      9840	              0	    2015	      04
#8861700030	 1589	 510000.0	        3	    1.50	    2400	 10275	    1.0	         0	        0	    4	         8	         1540	     860	        1964	            0	      2380	     10125	              0	    2014	      12
#8965450190	 1459	 295000.0	        3	    2.50	    1500	  3060	    2.0	         0	        0	    3	         7	         1500	       0	        1994	            0	      2700	      7734	              0	    2015	      02
#9510920050	 1472	 725000.0	        3	    2.50	    2980	 16996	    2.0	         0	        0	    3	        10	         2980	       0	        1992	            0	      2980	     15438	              0	    2014	      09
#9524100196	 1474	 239000.0	        2	    1.50	     680	   772	    2.0	         0	        0	    3	         7	          680	       0	        2005	            0	       690	      1059	              0     2014	      11
#2.2
#Присоедините к таблице clients данные по домам через метод merge
#Это нужно, чтобы понимать, какие дома покупались клиентами house_id - это индексы датафрейма с домами

merged = clients.merge(df, left_on='house_id', right_on='id')
merged
#client_id	  house_id	        id	    price	bedrooms	bathrooms	sqft_living	sqft_lot	floors	waterfront	...	grade	sqft_above	sqft_basement	yr_built	yr_renovated	sqft_living15	sqft_lot15	delta_renovated	yr_sale	month_sale
#0	  1459	8965450190	8965450190	 295000.0	       3	     2.50	       1500	    3060	   2.0	         0	...	    7	      1500	            0	    1994	           0	         2700	      7734	              0	   2015	        02
#1	  4684	6823100225	6823100225	 700000.0	       4	     1.75	       1870	    6000	   1.0	         0	...	    8	      1670	          200	    1949	           0	         1710	      6000	              0	   2015	        04
#2	  3498	5104540330	5104540330	 679000.0	       4	     2.50	       3680	    7236	   2.0	         0	...	   10	      3680	            0	    2006	           0	         3310	      7180	              0	   2015	        05
#3	  3942	2131701075	2131701075	 420000.0	       3	     1.75	       1720	    5000	   1.5	         0	...	    8	      1720	            0	    1932	        2009	         1410	      8300	             77	   2014	        12
#4	  4535	1522700060	1522700060	 518000.0	       4	     2.75	       2520	   14021	   2.0	         0	...	    9	      2520	            0	    1999	           0	         2330	     14007	              0	   2014	        06
#5	  2308	1189000207	1189000207	 387000.0	       2	     2.50	       1170	    1394	   2.0	         0	...	    8	      1170	            0	    2001	           0	         1250	      3136	              0	   2014	        10
#6	  2866	6821600300	6821600300	 886000.0	       3	     2.25	       2380	    6000	   2.0	         0	...	    9	      1650	          730	    1931	           0	         2000	      6000	              0	   2015	        03
#7	  2765	7137950720	7137950720	 339100.0	       4	     2.50	       2350	   10655	   2.0	         0	...	    8	      2350	            0	    1992	           0	         2210	      7028	              0	   2015	        03
#8	  1472	9510920050	9510920050	 725000.0	       3	     2.50	       2980	   16996	   2.0	         0	...	   10	      2980	            0	    1992	           0	         2980	     15438	              0	   2014	        09
#9	  4236	6131600255	6131600255	 202500.0	       3	     2.00	       1540     8316	   1.0	         0	...	    6	      1540	            0	    1954	           0	         1250	      8316	              0	   2014	        12
#10	  2295	5428000070	5428000070	 770000.0	       5	     3.50	       4750	    8234	   2.0	         0	...	   10	      3350	         1400	    2013	           0	         2160	     14496	              0	   2015	        05
#11	   939	1788800910	1788800910	 190000.0	       3	     1.00	       1200	   10458	   1.0	         0	...	    6	      1200	            0	    1961	           0	         1160	      9000	              0	   2014	        10
#12	  3840	8100400160	8100400160	 700000.0	       3	     2.25	       2330	   11424	   2.0	         0	...	    8	      2330	            0	    1984	           0	         2050	     11448	              0	   2015	        04
#13    280  3123049142	3123049142	 452000.0	       3	     2.25	       2600	   14810	   1.0	         0	...	    8	      1490	         1110	    1956	           0	         2450	     16715	              0	   2014	        08
#14	    20	6306800010	6306800010	 436472.0	       4	     2.50	       2692	    8392	   2.0	         0	...	    9	      2692	            0	    2014	           0	         2574	     14446	              0	   2014	        08
#15	  4332	5083000375	5083000375	 170000.0	       3	     1.00	       1310	    9529	   1.0	         0	...	    7	      1310	            0	    1956	           0	         1330	      9529	              0	   2014	        10
#16	  4332	5083000375	5083000375	 235000.0	       3	     1.00	       1310	    9529	   1.0	         0	...	    7	      1310	            0	    1956	           0	         1330	      9529	              0	   2015	        03
#17	  3475	7920100025	7920100025	 450000.0	       2	     1.00	        740	    5100	   1.0	         0	...	    7	       740	            0	    1947	           0	          920	      5100	              0	   2015	        04
#18	  4213	1951600150	1951600150	 180000.0	       3	     1.00	       1610	    8500	   1.5	         0	...	    7	      1610	            0	    1959	           0	         1070	      8750	              0	   2015	        04
#19	  3113	 809001400	 809001400	 925000.0	       3	     1.00	       1630	    3200	   1.5	         0	...	    8	      1630	            0	    1912	           0	         1710	      3600	              0	   2014	        09
#20	  4809	 339600110	 339600110	 395000.0	       3	     2.50	       1610	    3755	   2.0	         0	...	    7	      1610	            0	    1987	           0	         1300	      3823	              0	   2014	        09
#21	  2134	1622049154	1622049154	 289900.0	       3	     1.75	       1899	   11325	   2.0	         0	...	    7	      1899	            0	    1943	        2005	         2000	     10454	             62	   2014	        12
#22	  2242	1099600250	1099600250	 260000.0	       3	     1.75	       1710	    6400	   1.0	         0	...	    7	      1240	          470	    1976	           0	         1600	      6400	              0	   2014	        12
#23	  2068	8563000110	8563000110	 427000.0	       4	     1.75	       1460	    9750	   1.0	         0	...	    7	      1460	            0	    1967	           0	         1820	      9840	              0	   2015	        04
#24	  4929	2768100205	2768100205	 519000.0	       4	     2.50	       1950	    2617	   1.5	         0	...	    7	      1250	          700	    1910	           0	         1520	      1438	              0	   2014	        06
#25	  1384	3995700435	3995700435	 265000.0	       4	     3.00	       1940     8170	   1.0	         0	...	    7	      1940	            0	    1948	           0	         1310	      8169	              0	   2014	        07
#26	  1589	8861700030	8861700030	 510000.0	       3	     1.50	       2400	   10275	   1.0	         0	...	    8	      1540	          860	    1964	           0	         2380	     10125	              0	   2014     	12
#27	  3317	3303980210	3303980210	1115000.0	       4	     3.75	       4040	   14212	   2.0	         0	...	   11	      4040	            0	    2002	           0	         3940	     14212	              0	   2015	        04
#28	  2260	7731100066	7731100066	 545000.0	       3	     1.00	       1510	    5000	   1.5	         0	...	    7	      1510	            0	    1909	           0	         1680	      4000	              0	   2014	        06
#29	  1727	8146100580	8146100580	 765000.0	       3	     1.00	       1220     7585	   1.0	         0	...	    7	      1220	            0	    1954	           0	         1380	      8918	              0	   2014	        10
#30	  1764	 825069097	 825069097	 770000.0	       3	     2.50	       2650	   40705	   2.0	         0	...	    9	      2650	            0	    1994	           0	         2550	     42625	              0	   2014     	06
#31	  1611	3889100029	3889100029	 810000.0	       3	     2.50	       2670	   10481	   2.0	         0	...	    9	      2670	            0	    2003	           0	         2620	      8895	              0	   2014	        06
#32	  1474	9524100196	9524100196	 239000.0	       2	     1.50	        680	     772	   2.0	         0	...	    7	       680	            0	    2005	           0	          690	      1059	              0	   2014	        11
#33 rows × 22 columns

#Условие 3
#Составьте несколько сводных таблиц

#3.1
#Найдите среднюю стоимость домов в зависимости от количества спален
#Отсортируйте от меньшей стоимости к большей

df.groupby('bedrooms').agg({'price': 'mean'}).sort_values('price')
#price
#bedrooms
#       1	3.176429e+05
#       2	4.013727e+05
#       0	4.095038e+05
#       3	4.662321e+05
#      11	5.200000e+05
#       4	6.354195e+05
#      33	6.400000e+05
#       5	7.865998e+05
#      10	8.193333e+05
#       6	8.255206e+05
#       9	8.939998e+05
#       7	9.511847e+05
#       8	1.105077e+06
#3.2
#Найдите минимальную, среднюю и максимальную стоимости домов в зависимости от состояния дома

df.groupby('condition').agg({'price': ['min', 'max', 'mean']})
#price
#                 min	max	        mean
#condition
#        1	  78000.0	1500000.0	334431.666667
#        2	  80000.0	2555000.0	327287.145349
#        3	  75000.0	7062500.0	542012.578148
#        4	  89000.0	7700000.0	521200.390033
#        5	 110000.0	3650000.0	612418.089359
#3.3
#Постройте таблицу с подсчетом количества домов в данных в зависимости от вида на набережную и оценкой вида

df.pivot_table(index='waterfront', columns='view',
               values='price', aggfunc='count', fill_value=0)
#       view	    0	  1	  2	  3	  4
# waterfront
#          0	19489	331	955	491	184
#          1	    0	  1	  8	 19	135
df.groupby(['waterfront', 'view']).agg({'view': 'count'})
#                    view
#waterfront	view
#       	   0	19489
#              1 	  331
#         0    2	  955
#              3	  491
#              4	  184
#          	   1	    1
#              2	    8
#         1    3 	   19
#              4	  135
#3.4
#Каких домов в зависимости от этажности и количества спален больше?

pd.crosstab(index=df['floors'], columns=df['bedrooms'],
           margins=True, margins_name='Total')
#bedrooms	0	  1	   2	   3	   4	  5	   6	 7	 8	9	10	11	33	Total
#floors
#   1.0	    4	162	1951	5455	2383	605	 104	 9	 5	0	 1	 0	 1	10680
#   1.5	    0	 21	 182	 786	 698	185	  30	 7	 1	0	 0	 0	 0	 1910
#   2.0	    6	 12	 497	3118	3682	775	 119	19	 6	4	 2	 1	 0	 8241
#   2.5  	0	  1	   5	  56	  58	 23	  14	 2	 0	2	 0	 0	 0	  161
#   3.0	    2	  3	 123	 405	  61	 13	   5	 1	 0	0	 0	 0	 0	  613
#   3.5	    1	  0	   2	   4	   0	  0	   0	 0	 1	0	 0	 0	 0	    8
# Total	   13	199	2760	9824	6882   1601	 272	38	13	6	 3	 1	 1	21613
#3.5
#Постройте таблицу с подсчетом медианной стоимости домов в данных в зависимости от состояния дома и оценки дома

df.pivot_table(index='condition', columns='grade',
               values='price', aggfunc='median', fill_value=0)
#    grade	     1	     3	     4	     5	     6	     7	     8	      9	     10	     11	     12      13
#condition
#        1	142000	     0	150000	190000	255000	403500	932500	      0	      0	      0	      0	      0
#        2	     0	280000	145000	180000	235000	305000	429000	 715000	1752500	      0	      0	      0
#        3	     0	 75000	205000	234475	265000	357500	485000	 689000	 890000	1209500	1807500	2888000
#        4	     0	     0	238525	229975	295000	390000	571250	 823500	1030000	1685000	2125000	5750000
#        5	     0	262000	     0	227450	285475	456000	696000	1078000	1650000	2050000	1990000	      0
df.groupby(['condition', 'grade']).agg(
    {'price': 'median'}).unstack('grade').fillna(0)
#                                                  price
#    grade	       1	       3	       4	       5	       6	       7	       8	        9	       10	       11	       12	       13
#condition
#        1	142000.0	     0.0	150000.0	190000.0	255000.0	403500.0	932500.0	      0.0	      0.0	      0.0	      0.0	      0.0
#        2	     0.0	280000.0	145000.0	180000.0	235000.0	305000.0	429000.0	 715000.0	1752500.0	      0.0	      0.0	      0.0
#        3	     0.0	 75000.0	205000.0	234475.0	265000.0	357500.0	485000.0	 689000.0	 890000.0	1209500.0	1807500.0	2888000.0
#        4	     0.0	     0.0	238525.0	229975.0	295000.0	390000.0	571250.0	 823500.0	1030000.0	1685000.0	2125000.0	5750000.0
#        5	     0.0	262000.0	     0.0	227450.0	285475.0	456000.0	696000.0	1078000.0	1650000.0	2050000.0	1990000.0	      0.0